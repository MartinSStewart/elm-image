module BmpTests exposing (suite)

import Base64
import Expect exposing (Expectation)
import Image
import Image.Internal.ImageData exposing (Order(..), PixelFormat(..))
import Test exposing (..)


suite : Test
suite =
    describe "BMP"
        [ test "encode test data as base64" <|
            \_ ->
                largeData
                    |> Image.fromList2d
                    |> Image.encodeBmp
                    |> Base64.fromBytes
                    |> Maybe.withDefault ""
                    |> Expect.equal largeExpected
        , test "encode small test data as base64" <|
            \_ ->
                smallImage
                    |> Image.encodeBmp
                    |> Base64.fromBytes
                    |> Maybe.withDefault ""
                    |> Expect.equal "Qk3yAAAAAAAAAHoAAABsAAAACgAAAAMAAAABACAAAwAAAHgAAAATCwAAEwsAAAAAAAAAAAAAAAAA/wAA/wAA/wAA/wAAAFdpbiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAYAAAAJAAAADAAAAA8AAAASAAAAFQAAABgAAAAbAAAAAAAAAAIAAAAEAAAABgAAAAgAAAAKAAAADAAAAA4AAAAQAAAAEgAAAAAAAAABAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAA="
        , describe "pixel format" <|
            let
                pixelFormatTest constructor expected =
                    test (Debug.toString constructor) <|
                        \_ ->
                            Image.Internal.ImageData.List2d { format = constructor, defaultColor = 0, order = RightUp } smallData
                                |> Image.encodeBmp
                                |> Base64.fromBytes
                                |> Maybe.withDefault ""
                                |> Expect.equal expected
            in
            [ pixelFormatTest RGBA "Qk3yAAAAAAAAAHoAAABsAAAACgAAAAMAAAABACAAAwAAAHgAAAATCwAAEwsAAAAAAAAAAAAAAAAA/wAA/wAA/wAA/wAAAFdpbiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAAAAAAAAIAAAAEAAAABgAAAAgAAAAKAAAADAAAAA4AAAAQAAAAEgAAAAAAAAADAAAABgAAAAkAAAAMAAAADwAAABIAAAAVAAAAGAAAABsAAAA="
            , only <| pixelFormatTest RGB "Qk2WAAAAAAAAADYAAAAoAAAACgAAAAMAAAABABgAAAAAAGAAAAATCwAAEwsAAAAAAAAAAAAAAAAAAQAAAgAAAwAABAAABQAABgAABwAACAAACQAAAAAAAAACAAAEAAAGAAAIAAAKAAAMAAAOAAAQAAASAAAAAAAAAAMAAAYAAAkAAAwAAA8AABIAABUAABgAABsAAAAA"
            , pixelFormatTest LUMINANCE_ALPHA "Qk1yAAAAAAAAADYAAAAoAAAACgAAAAMAAAABABAAAAAAADwAAAATCwAAEwsAAAAAAAAAAAAAAAABAAIAAwAEAAUABgAHAAgACQAAAAIABAAGAAgACgAMAA4AEAASAAAAAwAGAAkADAAPABIAFQAYABsA"
            , pixelFormatTest ALPHA "Qk1UAAAAAAAAADYAAAAoAAAACgAAAAMAAAABAAgAAAAAAB4AAAATCwAAEwsAAAAAAAAAAAAAAAECAwQFBgcICQACBAYICgwOEBIAAwYJDA8SFRgb"
            ]
        , describe "order" <|
            let
                orderTest constructor expected =
                    test (Debug.toString constructor) <|
                        \_ ->
                            Image.Internal.ImageData.List2d { format = RGBA, defaultColor = 0, order = constructor } smallData
                                |> Image.encodeBmp
                                |> Base64.fromBytes
                                |> Maybe.withDefault ""
                                |> Expect.equal expected
            in
            [ orderTest RightDown "Qk3yAAAAAAAAAHoAAABsAAAACgAAAAMAAAABACAAAwAAAHgAAAATCwAAEwsAAAAAAAAAAAAAAAAA/wAA/wAA/wAA/wAAAFdpbiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAYAAAAJAAAADAAAAA8AAAASAAAAFQAAABgAAAAbAAAAAAAAAAIAAAAEAAAABgAAAAgAAAAKAAAADAAAAA4AAAAQAAAAEgAAAAAAAAABAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAA="
            , orderTest RightUp "Qk3yAAAAAAAAAHoAAABsAAAACgAAAAMAAAABACAAAwAAAHgAAAATCwAAEwsAAAAAAAAAAAAAAAAA/wAA/wAA/wAA/wAAAFdpbiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAAAAAAAAIAAAAEAAAABgAAAAgAAAAKAAAADAAAAA4AAAAQAAAAEgAAAAAAAAADAAAABgAAAAkAAAAMAAAADwAAABIAAAAVAAAAGAAAABsAAAA="
            , orderTest LeftDown "Qk3yAAAAAAAAAHoAAABsAAAACgAAAAMAAAABACAAAwAAAHgAAAATCwAAEwsAAAAAAAAAAAAAAAAA/wAA/wAA/wAA/wAAAFdpbiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbAAAAGAAAABUAAAASAAAADwAAAAwAAAAJAAAABgAAAAMAAAAAAAAAEgAAABAAAAAOAAAADAAAAAoAAAAIAAAABgAAAAQAAAACAAAAAAAAAAkAAAAIAAAABwAAAAYAAAAFAAAABAAAAAMAAAACAAAAAQAAAAAAAAA="
            , orderTest LeftUp "Qk3yAAAAAAAAAHoAAABsAAAACgAAAAMAAAABACAAAwAAAHgAAAATCwAAEwsAAAAAAAAAAAAAAAAA/wAA/wAA/wAA/wAAAFdpbiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAACAAAAAcAAAAGAAAABQAAAAQAAAADAAAAAgAAAAEAAAAAAAAAEgAAABAAAAAOAAAADAAAAAoAAAAIAAAABgAAAAQAAAACAAAAAAAAABsAAAAYAAAAFQAAABIAAAAPAAAADAAAAAkAAAAGAAAAAwAAAAAAAAA="
            ]
        , describe "default color" <|
            let
                defaultColorTest default expected =
                    test ("default color: " ++ Debug.toString default) <|
                        \_ ->
                            Image.Internal.ImageData.List2d { format = RGBA, defaultColor = default, order = RightUp } (smallData ++ [ [ 0, 1 ] ])
                                |> Image.encodeBmp
                                |> Base64.fromBytes
                                |> Maybe.withDefault ""
                                |> Expect.equal expected
            in
            [ defaultColorTest 42 "Qk0aAQAAAAAAAHoAAABsAAAACgAAAAQAAAABACAAAwAAAKAAAAATCwAAEwsAAAAAAAAAAAAAAAAA/wAA/wAA/wAA/wAAAFdpbiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAAAAAAAAIAAAAEAAAABgAAAAgAAAAKAAAADAAAAA4AAAAQAAAAEgAAAAAAAAADAAAABgAAAAkAAAAMAAAADwAAABIAAAAVAAAAGAAAABsAAAAAAAAAAQAAACoAAAAqAAAAKgAAACoAAAAqAAAAKgAAACoAAAAqAAAA"
            , defaultColorTest 3 "Qk0aAQAAAAAAAHoAAABsAAAACgAAAAQAAAABACAAAwAAAKAAAAATCwAAEwsAAAAAAAAAAAAAAAAA/wAA/wAA/wAA/wAAAFdpbiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAAAAAAAAIAAAAEAAAABgAAAAgAAAAKAAAADAAAAA4AAAAQAAAAEgAAAAAAAAADAAAABgAAAAkAAAAMAAAADwAAABIAAAAVAAAAGAAAABsAAAAAAAAAAQAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAA"
            ]
        ]


smallImage =
    smallData
        |> Image.fromList2d


smallData =
    List.range 0 9
        |> List.repeat 3
        |> List.indexedMap (\i -> List.map (\v -> v * (i + 1)))


largeData =
    List.range 0 99
        |> List.repeat 10
        |> List.indexedMap (\i -> List.map (\v -> v * (i + 1)))


largeExpected =
    """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"""
